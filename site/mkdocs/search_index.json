{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome\n\n\nHere's the sample documentation for demo purposes.", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome", 
            "text": "Here's the sample documentation for demo purposes.", 
            "title": "Welcome"
        }, 
        {
            "location": "/sources/2-Cookbook/chat/", 
            "text": "This section contains steps, tips and links to help the Game Studio successfully implement XMPP Chat.\n\n\nGlossary\n\n\n\n\nXMPPCS \u2014 XMPP\n1\n chat server.\n\n\nStanza\n2\n \u2014 a basic unit of meaning in XMPP protocol.\n\n\n\n\nOne-to-One Chats\n\n\nFor instant messaging all our titles use Chat based on the XMPP protocol.\n\n\nGenerally XMPP Chat integration breaks down into 2 major steps:\n\n\nTo set up a simple one-to-one chat\n:\n\n\n\n\nEmbed an XMPP client into the game client and implement \nChat extensions\n support.\n\n\nConfigure the XMPP client to connect to WG XMPPCS using JID and password.\n\n\n\n\nEmbedding XMPP Client\n\n\nTo ensure consistency and successful communication with the chat server, the embedded XMPP client should be implemented according to the principles and basics of the XMPP protocol.\n\n\nAs for library usage, consider using gloox\n3\n for C++ clients, or sleekxmpp\n4\n for Python clients. Though, we don't restrict using any library to implement the chat client.\n\n\nJIDs and Password\n\n\nJIDs follow the scheme \n${ID}@${XMPP_HOST}\n where:\n\n\n\n\nID\n is a unique user identifier for all example titles.\n\n\nXMPP_HOST\n is an XMPPCS DNS address, like \nyourapp.xmpp.example.net\n.\n\n\n\n\nHere's an example of a JID: \n10000001532@yourapp.xmpp.example.net\n\n\nOnce the chat client is embedded into the game client, use JID and Password to log in to the Chat server.\n\n\nTo get a JID and password:\n\n\n\n\nLog in and get an Auth Token, as part of a regular login procedure.\n\n\nUse one of the APIs to get an \nID\n and an extra \nauth_token\n for XMPPCS.\n\n\n\n\nAuth Token has a lifetime of 1 minute. Make sure to obtain a new one for each login.\n\n\n\n\nWarning\n\n\nDisable encrypted SSL-connection (set to Never) to allow plaintext authentication.\n\n\n\n\nMulti-User Chats (MUCs)\n\n\nMUC\n5\n is a chat where multiple XMPP users can exchange messages in the context of a room or channel.\n\n\nDepending on MUC behavior, we suggest using different MUC hosts. This allows us to optimize behavior, performance, etc. Chat MUCs fall into 4 categories:\n\n\n\n\nUser\n \u2014 simple chat rooms created and managed by the game client (e.g. friends chat).\n\n\nMass\n*\n \u2014 permanent default in-game chat rooms, like lobby. Mass rooms are created on the game server start. Restricted for non-privileged user manipulation.\n\n\nPersistent\n \u2014 dynamically created room from server for persistent entities, e.g. clans.\n\n\nTransient\n \u2014 dynamically created room from server for non-persistent entities, e.g. in-game chat.\n\n\n\n\n\n\nNote\n\n\n*\n Mass MUCs don't support user presence messages for performance reasons.\n\n\n\n\nMUCs Management\n\n\nFor security purposes, Mass, Persistent and Transient MUCs are created and configured by the game server and require an admin entity. Production credentials are provided separately upon request.\n\n\nWhen creating a MUC on the Chat Server, the Game Server sets the following parameters:\n\n\n\n\n\n\n\n\nParameter\n\n\nValue\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nmembersonly\n\n\nbool\n\n\nIndicates, if MUC is invite only, if yes - whitelist of JIDs.\n\n\n\n\n\n\nmaxusers\n\n\nint\n\n\nMaximum users count.\n\n\n\n\n\n\npersistentroom\n\n\nbool\n\n\nIndicates, if the room remains after user count is \n0\n.\n\n\n\n\n\n\n\n\nHost Naming Scheme\n\n\nHost naming follows the scheme: \n${MUC_HOST_TYPE}.${XMPP_HOST}\n\n\n\n\n\n\n\n\nHost\n\n\nXMPP Host\n\n\n\n\n\n\n\n\n\n\nChat Server\n\n\nrealm\n.xmpp.example.net\n\n\n\n\n\n\nGame Host\n\n\ngame\n.CHAT_SRV\n (by default)\n\n\n\n\n\n\nC2S Host\n\n\nc2s.GAME_HOST\n\n\n\n\n\n\nAdmin Host\n\n\nadmin.GAME_HOST\n\n\n\n\n\n\nMUC User Host\n\n\nuser.muc.GAME_HOST\n\n\n\n\n\n\nMUC Mass Host\n\n\nmass.muc.GAME_HOST\n\n\n\n\n\n\nMUC Persistent Host\n\n\npersistent.muc.GAME_HOST\n\n\n\n\n\n\nMUC Transient Host\n\n\ntransient.muc.GAME_HOST\n\n\n\n\n\n\n\n\nXEP Support\n\n\nAlthough WG XMPPCS does not contain the whole range of extensions (XEPs) described in the XMPP standard, support may be extended upon request.\n\n\nExtensions\n\n\nChat extensions add extra information to the \"source\" XML-stanza sent from one XMPP client to another.\n\n\nClient extensions\n are used to trasfer data from one XMPP client to another in real-time (for example, client version).\n\n\nServer extension\n is extra data which XMPP chat server adds to the \"source\" XML-stanza and transfers it to the XMPP client.\n\n\nWith Chat client extensions data is usually not associated with the game server. XMPPCS transfers the stanza with extensions \"as is\", not paying attention to the data, which is not XMPP standard.\n\n\nHere's an example of client extensions:\n\n\npresence\n \nxmlns=\njabber:client\n \nto=\nalice@example.net\n \nfrom=\nbob@example.net/wowp\n\n    \nwgexts-client\n \nxmlns=\nhttp://example.net/xmpplient\n\n        \nsomething\nsomevalue\n/something\n\n        \nyet-another\n1337\n/yet-another\n\n    \n/wgexts-client\n\n\n/presence\n\n\n\n\n\nHere's an example of server extensions (\nclanid\n, \nclantag\n, etc.):\n\n\npresence\n \nxmlns=\njabber:client\n \nto=\nalice@example.net\n \nfrom=\nbob@example.net/game\n\n    \npriority\n0\n/priority\n\n    \nc\n \nxmlns=\nhttp://jabber.org/protocol/caps\n \nver=\n1LpOuB49QCQE6BcZoAF5tBoALdg=\n\n    \nnode=\nhttp://camaya.net/gloox\n \nhash=\nsha-1\n/\n\n    \nwgexts\n \nxmlns=\nhttp://example.net/xmpp2\n\n        \nnickname\nplayers_nickname\n/nickname\n\n        \nuserid\n5010\n/userid\n\n        \nclanid\n1\n/clanid\n\n        \nclantag\nTEST\n/clantag\n\n    \n/wgexts\n\n\n/presence\n\n\n\n\n\n\n\nFor assistance and inquiries, contact the Integration Team at \n.\n\n\n\n\n\n\n\n\n\n\nExtensible Messaging and Presence Protocol (XMPP): Core\n\n\n\n\n\n\nStanza\n\n\n\n\n\n\ngloox\n\n\n\n\n\n\nsleekxmpp\n\n\n\n\n\n\nMUC Documentation", 
            "title": "XMPP Chat"
        }, 
        {
            "location": "/sources/2-Cookbook/chat/#glossary", 
            "text": "XMPPCS \u2014 XMPP 1  chat server.  Stanza 2  \u2014 a basic unit of meaning in XMPP protocol.", 
            "title": "Glossary"
        }, 
        {
            "location": "/sources/2-Cookbook/chat/#one-to-one-chats", 
            "text": "For instant messaging all our titles use Chat based on the XMPP protocol.  Generally XMPP Chat integration breaks down into 2 major steps:  To set up a simple one-to-one chat :   Embed an XMPP client into the game client and implement  Chat extensions  support.  Configure the XMPP client to connect to WG XMPPCS using JID and password.", 
            "title": "One-to-One Chats"
        }, 
        {
            "location": "/sources/2-Cookbook/chat/#embedding-xmpp-client", 
            "text": "To ensure consistency and successful communication with the chat server, the embedded XMPP client should be implemented according to the principles and basics of the XMPP protocol.  As for library usage, consider using gloox 3  for C++ clients, or sleekxmpp 4  for Python clients. Though, we don't restrict using any library to implement the chat client.", 
            "title": "Embedding XMPP Client"
        }, 
        {
            "location": "/sources/2-Cookbook/chat/#jids-and-password", 
            "text": "JIDs follow the scheme  ${ID}@${XMPP_HOST}  where:   ID  is a unique user identifier for all example titles.  XMPP_HOST  is an XMPPCS DNS address, like  yourapp.xmpp.example.net .   Here's an example of a JID:  10000001532@yourapp.xmpp.example.net  Once the chat client is embedded into the game client, use JID and Password to log in to the Chat server.  To get a JID and password:   Log in and get an Auth Token, as part of a regular login procedure.  Use one of the APIs to get an  ID  and an extra  auth_token  for XMPPCS.   Auth Token has a lifetime of 1 minute. Make sure to obtain a new one for each login.   Warning  Disable encrypted SSL-connection (set to Never) to allow plaintext authentication.", 
            "title": "JIDs and Password"
        }, 
        {
            "location": "/sources/2-Cookbook/chat/#multi-user-chats-mucs", 
            "text": "MUC 5  is a chat where multiple XMPP users can exchange messages in the context of a room or channel.  Depending on MUC behavior, we suggest using different MUC hosts. This allows us to optimize behavior, performance, etc. Chat MUCs fall into 4 categories:   User  \u2014 simple chat rooms created and managed by the game client (e.g. friends chat).  Mass *  \u2014 permanent default in-game chat rooms, like lobby. Mass rooms are created on the game server start. Restricted for non-privileged user manipulation.  Persistent  \u2014 dynamically created room from server for persistent entities, e.g. clans.  Transient  \u2014 dynamically created room from server for non-persistent entities, e.g. in-game chat.    Note  *  Mass MUCs don't support user presence messages for performance reasons.", 
            "title": "Multi-User Chats (MUCs)"
        }, 
        {
            "location": "/sources/2-Cookbook/chat/#mucs-management", 
            "text": "For security purposes, Mass, Persistent and Transient MUCs are created and configured by the game server and require an admin entity. Production credentials are provided separately upon request.  When creating a MUC on the Chat Server, the Game Server sets the following parameters:     Parameter  Value  Description      membersonly  bool  Indicates, if MUC is invite only, if yes - whitelist of JIDs.    maxusers  int  Maximum users count.    persistentroom  bool  Indicates, if the room remains after user count is  0 .", 
            "title": "MUCs Management"
        }, 
        {
            "location": "/sources/2-Cookbook/chat/#host-naming-scheme", 
            "text": "Host naming follows the scheme:  ${MUC_HOST_TYPE}.${XMPP_HOST}     Host  XMPP Host      Chat Server  realm .xmpp.example.net    Game Host  game .CHAT_SRV  (by default)    C2S Host  c2s.GAME_HOST    Admin Host  admin.GAME_HOST    MUC User Host  user.muc.GAME_HOST    MUC Mass Host  mass.muc.GAME_HOST    MUC Persistent Host  persistent.muc.GAME_HOST    MUC Transient Host  transient.muc.GAME_HOST", 
            "title": "Host Naming Scheme"
        }, 
        {
            "location": "/sources/2-Cookbook/chat/#xep-support", 
            "text": "Although WG XMPPCS does not contain the whole range of extensions (XEPs) described in the XMPP standard, support may be extended upon request.", 
            "title": "XEP Support"
        }, 
        {
            "location": "/sources/2-Cookbook/chat/#extensions", 
            "text": "Chat extensions add extra information to the \"source\" XML-stanza sent from one XMPP client to another.  Client extensions  are used to trasfer data from one XMPP client to another in real-time (for example, client version).  Server extension  is extra data which XMPP chat server adds to the \"source\" XML-stanza and transfers it to the XMPP client.  With Chat client extensions data is usually not associated with the game server. XMPPCS transfers the stanza with extensions \"as is\", not paying attention to the data, which is not XMPP standard.  Here's an example of client extensions:  presence   xmlns= jabber:client   to= alice@example.net   from= bob@example.net/wowp \n     wgexts-client   xmlns= http://example.net/xmpplient \n         something somevalue /something \n         yet-another 1337 /yet-another \n     /wgexts-client  /presence   Here's an example of server extensions ( clanid ,  clantag , etc.):  presence   xmlns= jabber:client   to= alice@example.net   from= bob@example.net/game \n     priority 0 /priority \n     c   xmlns= http://jabber.org/protocol/caps   ver= 1LpOuB49QCQE6BcZoAF5tBoALdg= \n     node= http://camaya.net/gloox   hash= sha-1 / \n     wgexts   xmlns= http://example.net/xmpp2 \n         nickname players_nickname /nickname \n         userid 5010 /userid \n         clanid 1 /clanid \n         clantag TEST /clantag \n     /wgexts  /presence    For assistance and inquiries, contact the Integration Team at  .      Extensible Messaging and Presence Protocol (XMPP): Core    Stanza    gloox    sleekxmpp    MUC Documentation", 
            "title": "Extensions"
        }, 
        {
            "location": "/sources/2-Cookbook/bi/", 
            "text": "The Platform provides a set of dashboards with data insights for Games and Services integrated with the Platform. Dashboards are generated based on the data events which communicate changes in the Platform or Game.\n\n\nDepending on the integration depth, these standard dashboards can be generated:\n\n\n\n\n\n\n\n\nFinance\n\n\nDistribution\n\n\nEngagement \n Acquisition\n\n\n\n\n\n\n\n\n\n\nRoyalty reports\nGross revenue\nPU/New PU\nARPPU/ARPU\nProducts\n\n\nFunnel\nLaunches\nInstalls/deletes\nActive instances\n\n\nDAU/WAU/MAU\nRetention/Churn\nMAU division\nAcquisition funnel\nRecency vs Frequency\nLTV\n\n\n\n\n\n\n\n\nCustom dashboards can be generated as well, contact the Publisher for assistance.\n\n\n\n\nTip\n\n\nTo access the reports dashboard, use your Partner account or request one from the Integration Team. \nNote\n: VPN connection is required.\n\n\n\n\nPlatform Events\n\n\nPlatform Events are generated by the Platform Services. These events are sent automatically, once your Game uses the Platform:\n\n\n\n\nTo define active users (for example, based on game login information).\n\n\nTo store and manage entitlements.\n\n\nTo store and manage currencies.\n\n\n\n\nIf none or only some of the conditions are met, the Game will need to \nsend standard game events\n.\n\n\nGame Events\n\n\nGame Events are generated by the Game and sent to the Platform. Game events can be correlated to the Platform data, allowing for metrics and dashboards to be generated.\n\n\n\n\nStandard\n events are required to build minimum set of dashboards (finance and monetizations reports, acquisition funnel).\n\n\nCustom\n events are the events which allow the Game Publisher or Partner get advanced reports associated with those events.\n\n\n\n\nSending Events\n\n\nBefore sending a game event to the Platform, make sure the following parameters are provided beforehand by the Integration Team:\n\n\n\n\nserver-api-key\n\n\nemitter_name\n\n\nemitter_id\n\n\nevent_name\n\n\n\n\nThe \nevent_name\n parameter is provided only for standard events, create your own custom event names according to the recommendations below.\n\n\n\n\nWarning\n\n\nEvent naming and schema conventions:\n\n\n\n\nThe \nevent_name\n parameter should contain only lowercase Latin letters. No special characters, camel case, etc.\n\n\nThe \nevent_name\n parameter has a version number for backward compatibility. For example, \ngoodevent_v3\n.\n\n\nEvent header follows the \nstandard event header schema\n with \nevent_id\n, \nevent_timestamp\n, and \nemitter_id\n.\n\n\n\n\n\n\nEvents sent using standard schemas will be registered automatically. Events containing extra fields or a different schema should be registered separately. Contact the Integration Team for assistance.\n\n\nTo ensure further flexibility, the Platform provides a single \npostEvent\n HTTP endpoint for sending events, and a set of recommended schemas for basic data flows.\n\n\nPOST\n \nhttps://api.example.net/api/postEvent/{emitter_name}/{event_name}\n\n\n\n\nWarning\n\n\nFor production purposes make sure to replace the test host \nhttps://api.example.net\n with the production host \nhttps://{realm}.example.net\n. Contact the Integration Team for assistance.\n\n\n\n\nRequest Header\n\n\n\n\nContent-Type \u2014 method accepts only JSON body payloads. Supply the \nContent-Type: application/json\n HTTP header when making this request.\n\n\nserver-api-key\n \u2014 authentication API key.\n\n\n\n\nRequest Body\n\n\nBody parameters are sent as a JSON payload with an agreed upon set of parameters.\n\n\nResponses\n\n\n\n\n202\n (Accepted) \u2014 Request has been verified and accepted for processing.\n\n\n400\n (Bad Request) \u2014 Request could not be processed by the server due to malformed syntax.\n\n\n401\n (Unauthorized) \u2014 Request has not been applied because it lacks valid authentication credentials for the target resource.\n\n\n403\n (Forbidden) \u2014 Request was valid, but the server is refusing action. The client might not have the necessary permissions to publish the specified emitter/event.\n\n\n404\n (Not Found) \u2014 Proxy has not found the matching configuration in Metadata Registry for the specified emitter name and event name.\n\n\n415\n (Unsupported Media Type) \u2014 Proxy is refusing to service the request because the entity of the request has an unsupported format.\n\n\n422\n (Unprocessable Entity) \u2014 Request payload does not conform to the corresponding AVRO schema.\n\n\n503\n (Service Unavailable) \u2014 Proxy is currently unable to handle the request due to a temporary overloading or server maintenance.\n\n\n\n\nStandard Event\n\n\nA standard event data schema has the following parameters. Based on the \nuseractivity\n event sent by games to detect active users.\n\n\nEvent Header\n\n\n\n\n\n\n\n\nParameter\n\n\nData Type\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nevent_id\n\n\nString\n\n\nGenerated as described in \nhttps://github.com/alizain/ulid\n.\n\n\n01BWR265F526VQJ6B65H5A72PB\n\n\n\n\n\n\nevent_timestamp\n\n\nLong\n\n\nThe timestamp when the event is created. In milliseconds since the Unix Epoch Time.\n\n\n1518461534010\n\n\n\n\n\n\nemitter_id\n\n\nInteger\n\n\nEmitter ID of the game title which is emitting the event.\n\n\n777\n\n\n\n\n\n\n\n\nEvent Body\n\n\n\n\n\n\n\n\nParameter\n\n\nData Type\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nwgid\n\n\nLong\n\n\nUser ID whose account data is updated.\n\n\n20000012312\n\n\n\n\n\n\nactivity_type\n\n\nString\n\n\nFor most integrated apps, \nactivity\n equals \nusage instances\n. According to Active Users KPI \u2014 the total number of unique users who used the app at least one time within the examined period.\n\n\nbattle\n\n\n\n\n\n\nlast_activity_at\n\n\nLong\n\n\nUser's last activity in the game. In milliseconds since the Unix Epoch Time.\n\n\n1518461554811\n\n\n\n\n\n\nactivity_count\n\n\nInteger\n\n\nThe number of activities which are defining user's activity.\n\n\n12\n\n\n\n\n\n\nlevel\n\n\nInteger\n\n\nThe level of the user's account in the app (or max characters level, if a user has multiple sub-accounts within the account).\n\n\n80\n\n\n\n\n\n\n\n\nExpand to see the request example\ncurl -X POST --header \nContent-Type: application/json\n --header \nAccept: application/json\n --header \nserver-api-key: xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx\n -d \n{\n\n\n    \nheader\n: {\n\n\n        \nevent_id\n: \n01BWR265F526VQJ6B65H5A72D\n,\n\n\n        \nevent_timestamp\n: 1518461534010,\n\n\n        \nemitter_id\n: 3026\n\n\n    },\n\n\n    \nbody\n: {\n\n\n        \nwgid\n: 10000039059,\n\n\n        \nactivity_type\n: \npurchase\n,\n\n\n        \nlast_activity_at\n: 1518461554811,\n\n\n        \nactivity_count\n: 12,\n\n\n        \nlevel\n: 80\n\n\n    }\n\n\n}\n \nhttps://api.example.net/api/postEvent/{emitter_name}/useractivity\n\n\n\n\nCustom Event\n\n\nCustom events have no strictly pre-defined event body schema and therefore should follow the conventions mentioned in the \nSending Events\n section.\n\n\nBefore sending custom events, provide the Integration Team with event body parameters following this pattern: parameter name, data type, description, example value.", 
            "title": "Business Intelligence"
        }, 
        {
            "location": "/sources/2-Cookbook/bi/#platform-events", 
            "text": "Platform Events are generated by the Platform Services. These events are sent automatically, once your Game uses the Platform:   To define active users (for example, based on game login information).  To store and manage entitlements.  To store and manage currencies.   If none or only some of the conditions are met, the Game will need to  send standard game events .", 
            "title": "Platform Events"
        }, 
        {
            "location": "/sources/2-Cookbook/bi/#game-events", 
            "text": "Game Events are generated by the Game and sent to the Platform. Game events can be correlated to the Platform data, allowing for metrics and dashboards to be generated.   Standard  events are required to build minimum set of dashboards (finance and monetizations reports, acquisition funnel).  Custom  events are the events which allow the Game Publisher or Partner get advanced reports associated with those events.", 
            "title": "Game Events"
        }, 
        {
            "location": "/sources/2-Cookbook/bi/#sending-events", 
            "text": "Before sending a game event to the Platform, make sure the following parameters are provided beforehand by the Integration Team:   server-api-key  emitter_name  emitter_id  event_name   The  event_name  parameter is provided only for standard events, create your own custom event names according to the recommendations below.   Warning  Event naming and schema conventions:   The  event_name  parameter should contain only lowercase Latin letters. No special characters, camel case, etc.  The  event_name  parameter has a version number for backward compatibility. For example,  goodevent_v3 .  Event header follows the  standard event header schema  with  event_id ,  event_timestamp , and  emitter_id .    Events sent using standard schemas will be registered automatically. Events containing extra fields or a different schema should be registered separately. Contact the Integration Team for assistance.  To ensure further flexibility, the Platform provides a single  postEvent  HTTP endpoint for sending events, and a set of recommended schemas for basic data flows.  POST   https://api.example.net/api/postEvent/{emitter_name}/{event_name}   Warning  For production purposes make sure to replace the test host  https://api.example.net  with the production host  https://{realm}.example.net . Contact the Integration Team for assistance.   Request Header   Content-Type \u2014 method accepts only JSON body payloads. Supply the  Content-Type: application/json  HTTP header when making this request.  server-api-key  \u2014 authentication API key.   Request Body  Body parameters are sent as a JSON payload with an agreed upon set of parameters.  Responses   202  (Accepted) \u2014 Request has been verified and accepted for processing.  400  (Bad Request) \u2014 Request could not be processed by the server due to malformed syntax.  401  (Unauthorized) \u2014 Request has not been applied because it lacks valid authentication credentials for the target resource.  403  (Forbidden) \u2014 Request was valid, but the server is refusing action. The client might not have the necessary permissions to publish the specified emitter/event.  404  (Not Found) \u2014 Proxy has not found the matching configuration in Metadata Registry for the specified emitter name and event name.  415  (Unsupported Media Type) \u2014 Proxy is refusing to service the request because the entity of the request has an unsupported format.  422  (Unprocessable Entity) \u2014 Request payload does not conform to the corresponding AVRO schema.  503  (Service Unavailable) \u2014 Proxy is currently unable to handle the request due to a temporary overloading or server maintenance.", 
            "title": "Sending Events"
        }, 
        {
            "location": "/sources/2-Cookbook/bi/#standard-event", 
            "text": "A standard event data schema has the following parameters. Based on the  useractivity  event sent by games to detect active users.  Event Header     Parameter  Data Type  Description  Example      event_id  String  Generated as described in  https://github.com/alizain/ulid .  01BWR265F526VQJ6B65H5A72PB    event_timestamp  Long  The timestamp when the event is created. In milliseconds since the Unix Epoch Time.  1518461534010    emitter_id  Integer  Emitter ID of the game title which is emitting the event.  777     Event Body     Parameter  Data Type  Description  Example      wgid  Long  User ID whose account data is updated.  20000012312    activity_type  String  For most integrated apps,  activity  equals  usage instances . According to Active Users KPI \u2014 the total number of unique users who used the app at least one time within the examined period.  battle    last_activity_at  Long  User's last activity in the game. In milliseconds since the Unix Epoch Time.  1518461554811    activity_count  Integer  The number of activities which are defining user's activity.  12    level  Integer  The level of the user's account in the app (or max characters level, if a user has multiple sub-accounts within the account).  80     Expand to see the request example curl -X POST --header  Content-Type: application/json  --header  Accept: application/json  --header  server-api-key: xxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxx  -d  {       header : {           event_id :  01BWR265F526VQJ6B65H5A72D ,           event_timestamp : 1518461534010,           emitter_id : 3026      },       body : {           wgid : 10000039059,           activity_type :  purchase ,           last_activity_at : 1518461554811,           activity_count : 12,           level : 80      }  }   https://api.example.net/api/postEvent/{emitter_name}/useractivity", 
            "title": "Standard Event"
        }, 
        {
            "location": "/sources/2-Cookbook/bi/#custom-event", 
            "text": "Custom events have no strictly pre-defined event body schema and therefore should follow the conventions mentioned in the  Sending Events  section.  Before sending custom events, provide the Integration Team with event body parameters following this pattern: parameter name, data type, description, example value.", 
            "title": "Custom Event"
        }
    ]
}